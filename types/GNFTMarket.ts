/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace GNFTMarket {
  export type ItemStruct = {
    itemId: BigNumberish;
    tokenContract: string;
    tokenId: BigNumberish;
    creator: string;
    seller: string;
    owner: string;
    price: BigNumberish;
    sold: boolean;
  };

  export type ItemStructOutput = [
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    string,
    BigNumber,
    boolean
  ] & {
    itemId: BigNumber;
    tokenContract: string;
    tokenId: BigNumber;
    creator: string;
    seller: string;
    owner: string;
    price: BigNumber;
    sold: boolean;
  };
}

export interface GNFTMarketInterface extends utils.Interface {
  contractName: "GNFTMarket";
  functions: {
    "cancelSell(uint256)": FunctionFragment;
    "cashOut()": FunctionFragment;
    "getGNFTItem(uint256)": FunctionFragment;
    "getPaginatedItems(uint256,uint256)": FunctionFragment;
    "getTotalUnsoldItems()": FunctionFragment;
    "getUnsoldItemByIndex(uint256)": FunctionFragment;
    "listItem(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "purchaseItem(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelSell",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cashOut", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGNFTItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaginatedItems",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalUnsoldItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnsoldItemByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "cancelSell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cashOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGNFTItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaginatedItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalUnsoldItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnsoldItemByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listItem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ItemCreated(uint256,address,uint256,address,address,address,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type ItemCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, string, BigNumber, boolean],
  {
    itemId: BigNumber;
    tokenContract: string;
    tokenId: BigNumber;
    creator: string;
    seller: string;
    owner: string;
    price: BigNumber;
    arg7: boolean;
  }
>;

export type ItemCreatedEventFilter = TypedEventFilter<ItemCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface GNFTMarket extends BaseContract {
  contractName: "GNFTMarket";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GNFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSell(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cashOut(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGNFTItem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GNFTMarket.ItemStructOutput]>;

    getPaginatedItems(
      pageSize: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[GNFTMarket.ItemStructOutput[]]>;

    getTotalUnsoldItems(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUnsoldItemByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    listItem(
      tokenContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSell(
    itemId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cashOut(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGNFTItem(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GNFTMarket.ItemStructOutput>;

  getPaginatedItems(
    pageSize: BigNumberish,
    page: BigNumberish,
    overrides?: CallOverrides
  ): Promise<GNFTMarket.ItemStructOutput[]>;

  getTotalUnsoldItems(overrides?: CallOverrides): Promise<BigNumber>;

  getUnsoldItemByIndex(
    idx: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  listItem(
    tokenContract: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  purchaseItem(
    itemId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSell(itemId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    cashOut(overrides?: CallOverrides): Promise<void>;

    getGNFTItem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GNFTMarket.ItemStructOutput>;

    getPaginatedItems(
      pageSize: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<GNFTMarket.ItemStructOutput[]>;

    getTotalUnsoldItems(overrides?: CallOverrides): Promise<BigNumber>;

    getUnsoldItemByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      tokenContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ItemCreated(uint256,address,uint256,address,address,address,uint256,bool)"(
      itemId?: BigNumberish | null,
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      creator?: null,
      seller?: null,
      owner?: null,
      price?: null,
      arg7?: null
    ): ItemCreatedEventFilter;
    ItemCreated(
      itemId?: BigNumberish | null,
      tokenContract?: string | null,
      tokenId?: BigNumberish | null,
      creator?: null,
      seller?: null,
      owner?: null,
      price?: null,
      arg7?: null
    ): ItemCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    cancelSell(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cashOut(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGNFTItem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaginatedItems(
      pageSize: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalUnsoldItems(overrides?: CallOverrides): Promise<BigNumber>;

    getUnsoldItemByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listItem(
      tokenContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSell(
      itemId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cashOut(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGNFTItem(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaginatedItems(
      pageSize: BigNumberish,
      page: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalUnsoldItems(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnsoldItemByIndex(
      idx: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listItem(
      tokenContract: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchaseItem(
      itemId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
